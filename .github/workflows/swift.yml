name: Swift

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
#    - name: Install Dependencies
#      run: |
#       pod install --repo-update
    - name: Set Default Scheme
      run: |
        scheme_list=$(xcodebuild -list -json | tr -d "\n")
        default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
        echo $default | cat >default
        echo Using default scheme: $default
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v
#    - name: Test
#      env:
#        scheme: ${{ 'default' }}
#        platform: ${{ 'iOS Simulator' }}
#      run: |
#        # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
#        # device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}'`
#        # 直接指定 iPhone 11
#        device='iPhone 11'
#        if [ $scheme = default ]; then scheme=$(cat default); fi
#        if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
#        file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
#        xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
    - name: Create file status_build_test.txt and write the job status into it
      if: always()
      run: |
        echo ${{ job.status }} > status_build_test.txt
    - name: Upload file status_build_test.txt as an artifact
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: pass_status_build_test
        path: status_build_test.txt

